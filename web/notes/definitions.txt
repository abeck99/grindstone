TEXT MONITORING FLOW::::::::::::::::::::

REQUIRE dropbox initial sync before parsing anything
(IE wait for initial sync then start observing file changes)
- Dropbox sync doesn't upload
- Observe changes in DB->
  - Do a diff, what's added, removed, changed and add to DB

Observe changes in DB
 -> convert all IDs to strip Project name
 -> render to text
 -> IMPORTANT: check for changes when adding to git, if none return
	 -> OTHERWISE:
	 -> git commit
 	 -> upload to dropbox

PROJECTS == FOLDERS


Dropbox update loop:
 -> On startup, check every file as below (IE parse to save to db if changes)
 -> ping delta every 5 minutes
 -> ignore anything in the .git directory or _id_count.txt (alternatively, just look for todo.txt)
 -> if no files changed, go to 1
 	-> If files changed...
 	-> git commit
 	-> save
 	-> parse
 	-> set project on all files
 	-> Give a new ID to any new objects (increment a counter saved in a _id_count.txt)
 	-> convert IDs to include project
 	-> Check against DB - determine a) what's added, b) what's updated, c) what's deleted
 	-> Save to DB using those above
 	-> upload git repo to dropbox

Monitor git changes in filesystem
 -> upload git repo to dropbox


Views:
 - Items To Process
 	- Status in Inbox, Needs Review, or delegated and it's been 2 days (i dunno..)
 	- Anything marked Needs Resolution
 - Available Next Actions
 	- Status in Deferred (and date has passed), incomplete
 	- All items in blocked by (and children) are marked as deleted, complete, dropped, or dont exist
 	- Project is not on hold, and no parent is deferred
 - Delegated
 	- status is delegated
 - Projects on hold
 - root projects
 - Deferred items over the next 2 weeks (calendar view)

Dashboard
 - List of items to process
 - List of Next Actions
 - List of Delegated Actions
 - Project Navigator
 - Calendar over the next 2 weeks
 - Simple search by anything
 - Custom Map/Reduce Search







KPIs
 - Project - Total tasks, total incomplete, total completed

pip install rx
pip install regex
pip install watchdog
pip install gitpython


ACCESS_token for dropbox
Sa59zYDtdDIAAAAAAAADoTL7cFwwDi7cOKEIfxXOp1Jx9hxE_q-9Ly2z7yGmQWvs

Task data definitions
Task
Queries
Generators


Task
	Name
	Description
	Parent Task
	Project
	Needs Resolution

	Status (Enum) -> (
			Inbox (no prefix), 
			Deleted (no prefix, not in file),
			Needs Review (?), 
			Deferred (... DEFERRED DATE: ), 
			Incomplete (-), 
			Dropped (XXX), 
			Delegated (-> DELEGATE NAME:), 
			Complete (x)
			)
	Tags (array)

	Created Date
	Updated Date


name_regex = r'^(?P<indention>\s*)(?P<_type>(?P<type>\?)|(?P<type>//)|(?P<type>\.\.\.)(?:(?P<deferred_to>(?:.*?)):|)|(?P<type>XXX)|(?P<type>->)(?:(?P<delegated_to>(?:.*?)):|)|(?P<type>-)|(?P<type>x)|(?P<type>))(?P<name>[^~]*)(?P<_tags>~\((?P<tags>.*?)\)|)(?P<filler_a>[^~]*)(?P<_ID>~\[(?P<ID>.*?)\]|)(?P<filler_b>[^~]*)(?P<filler_c>[^~]*)(?P<_tags_alt>~\((?P<tags>.*?)\)|)(?P<filler_d>.*)$'

indention
type
deferred_to
delegated_to
name
tags
ID
filler_a
filler_b
filler_c
filler_d

if _tags AND _tags_alt:
	error parsing, only one ~() can exist
if _filler_a OR _filler_b OR _filler_c OR _filler_d:
	error parsing, after tags/ids nothing can go there or no ~s in task name





x = "     - Steve: Test ~this thing: HI? ///~(BASBAS,.efgef , ef?) ~(TEST 2) ~[ABCD]"

- Hi?
   - HI?
   - HI? ~[ABC]
   - HI? ~[ABC] ~(A, B, C, D)
   - HI? ~(A, B, C, D) ~[ABC]

Saved Queries
	(using )


What kind of storage?
Is it possible to only have manual resolution?
What language to use? (something that we can do:
	- email
	- REST interface
	- dropbox
	- render html views
	)


View all tasks with children where all children are complete
Sycned keystore across mul;tiple sources
Send email -> Add to key store, sync


Email ->
-> Dropbox Text ->
-> Repeating Tasks progress
-> iPhone app ->
-> Web app ->


- Do something ~(Home, Phone) ~[SOME_ID]
: More detail goes here, etc, etc
: Even more detail
BLOCKED BY: BLOCKED_BY_ID, BLOCKED_BY_ANOTHER_ID
	- Sub task 1
	:  Sub task detail
		x Sub sub task 1
	- Sub task 2




Project Files
Contracting/Rehash/Prospect Park.txt



(\s*)-(.*)

(?P<indention>\s*)-(?P<name>.*).*(~\((.*?)\))?.*(~\[(.*?)\])?.*

(?P<indention>\s*)-(?P<name>.*).*(?P<Tags>~\((.*?)\)).*(?P<ID>~\((.*?)\)).*


(?P<indention>\s*)-(?P<name>.*).*(?P<Tags>~\((.*?)\)).*((?P<ID>~\[(.*?)\]))?.*




(?P<indention>\s*)-(?P<name>.*).*((?P<Tags>~\((.*?)\)))?.*((?P<ID>~\[(.*?)\]))?.*



(?P<indention>\s*)-(?P<name>.*).*?((?P<Tags>~\((.*?)\)))?.*?((?P<ID>~\[(.*?)\]))?.*


(?P<indention>\s*)-(?P<name>.*)










Remove access-token, app-secret, app-token from py file, copy to the side
check in
bfg - get rid of those text files

add config to gitignore

ensure .idea folder is removed from folder
upload to github (ensure app tokens are scrubbed...)

Remove ~/Documents/Projects/TodoApp









